// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mp_options.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mp_5foptions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mp_5foptions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mp_5foptions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mp_5foptions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mp_5foptions_2eproto;
class motion_planning_task;
struct motion_planning_taskDefaultTypeInternal;
extern motion_planning_taskDefaultTypeInternal _motion_planning_task_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::motion_planning_task* Arena::CreateMaybeMessage<::motion_planning_task>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class motion_planning_task final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:motion_planning_task) */ {
 public:
  inline motion_planning_task() : motion_planning_task(nullptr) {}
  ~motion_planning_task() override;
  explicit constexpr motion_planning_task(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  motion_planning_task(const motion_planning_task& from);
  motion_planning_task(motion_planning_task&& from) noexcept
    : motion_planning_task() {
    *this = ::std::move(from);
  }

  inline motion_planning_task& operator=(const motion_planning_task& from) {
    CopyFrom(from);
    return *this;
  }
  inline motion_planning_task& operator=(motion_planning_task&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const motion_planning_task& default_instance() {
    return *internal_default_instance();
  }
  static inline const motion_planning_task* internal_default_instance() {
    return reinterpret_cast<const motion_planning_task*>(
               &_motion_planning_task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(motion_planning_task& a, motion_planning_task& b) {
    a.Swap(&b);
  }
  inline void Swap(motion_planning_task* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(motion_planning_task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  motion_planning_task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<motion_planning_task>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const motion_planning_task& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const motion_planning_task& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(motion_planning_task* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "motion_planning_task";
  }
  protected:
  explicit motion_planning_task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScenarioFieldNumber = 1,
    kAlgorithmFieldNumber = 2,
    kEnvFieldNumber = 3,
    kRobotFieldNumber = 4,
    kStartFieldNumber = 5,
    kGoalFieldNumber = 6,
    kMinFieldNumber = 7,
    kMaxFieldNumber = 8,
  };
  // optional string scenario = 1;
  bool has_scenario() const;
  private:
  bool _internal_has_scenario() const;
  public:
  void clear_scenario();
  const std::string& scenario() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scenario(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scenario();
  PROTOBUF_NODISCARD std::string* release_scenario();
  void set_allocated_scenario(std::string* scenario);
  private:
  const std::string& _internal_scenario() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scenario(const std::string& value);
  std::string* _internal_mutable_scenario();
  public:

  // optional string algorithm = 2;
  bool has_algorithm() const;
  private:
  bool _internal_has_algorithm() const;
  public:
  void clear_algorithm();
  const std::string& algorithm() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_algorithm(ArgT0&& arg0, ArgT... args);
  std::string* mutable_algorithm();
  PROTOBUF_NODISCARD std::string* release_algorithm();
  void set_allocated_algorithm(std::string* algorithm);
  private:
  const std::string& _internal_algorithm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_algorithm(const std::string& value);
  std::string* _internal_mutable_algorithm();
  public:

  // optional string env = 3;
  bool has_env() const;
  private:
  bool _internal_has_env() const;
  public:
  void clear_env();
  const std::string& env() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_env(ArgT0&& arg0, ArgT... args);
  std::string* mutable_env();
  PROTOBUF_NODISCARD std::string* release_env();
  void set_allocated_env(std::string* env);
  private:
  const std::string& _internal_env() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_env(const std::string& value);
  std::string* _internal_mutable_env();
  public:

  // optional string robot = 4;
  bool has_robot() const;
  private:
  bool _internal_has_robot() const;
  public:
  void clear_robot();
  const std::string& robot() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_robot(ArgT0&& arg0, ArgT... args);
  std::string* mutable_robot();
  PROTOBUF_NODISCARD std::string* release_robot();
  void set_allocated_robot(std::string* robot);
  private:
  const std::string& _internal_robot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot(const std::string& value);
  std::string* _internal_mutable_robot();
  public:

  // optional string start = 5;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const std::string& start() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start();
  PROTOBUF_NODISCARD std::string* release_start();
  void set_allocated_start(std::string* start);
  private:
  const std::string& _internal_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // optional string goal = 6;
  bool has_goal() const;
  private:
  bool _internal_has_goal() const;
  public:
  void clear_goal();
  const std::string& goal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_goal(ArgT0&& arg0, ArgT... args);
  std::string* mutable_goal();
  PROTOBUF_NODISCARD std::string* release_goal();
  void set_allocated_goal(std::string* goal);
  private:
  const std::string& _internal_goal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_goal(const std::string& value);
  std::string* _internal_mutable_goal();
  public:

  // optional string min = 7;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  const std::string& min() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_min(ArgT0&& arg0, ArgT... args);
  std::string* mutable_min();
  PROTOBUF_NODISCARD std::string* release_min();
  void set_allocated_min(std::string* min);
  private:
  const std::string& _internal_min() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_min(const std::string& value);
  std::string* _internal_mutable_min();
  public:

  // optional string max = 8;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  const std::string& max() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_max(ArgT0&& arg0, ArgT... args);
  std::string* mutable_max();
  PROTOBUF_NODISCARD std::string* release_max();
  void set_allocated_max(std::string* max);
  private:
  const std::string& _internal_max() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_max(const std::string& value);
  std::string* _internal_mutable_max();
  public:

  // @@protoc_insertion_point(class_scope:motion_planning_task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenario_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr env_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr goal_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr min_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr max_;
  friend struct ::TableStruct_mp_5foptions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// motion_planning_task

// optional string scenario = 1;
inline bool motion_planning_task::_internal_has_scenario() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool motion_planning_task::has_scenario() const {
  return _internal_has_scenario();
}
inline void motion_planning_task::clear_scenario() {
  scenario_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& motion_planning_task::scenario() const {
  // @@protoc_insertion_point(field_get:motion_planning_task.scenario)
  return _internal_scenario();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void motion_planning_task::set_scenario(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 scenario_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:motion_planning_task.scenario)
}
inline std::string* motion_planning_task::mutable_scenario() {
  std::string* _s = _internal_mutable_scenario();
  // @@protoc_insertion_point(field_mutable:motion_planning_task.scenario)
  return _s;
}
inline const std::string& motion_planning_task::_internal_scenario() const {
  return scenario_.Get();
}
inline void motion_planning_task::_internal_set_scenario(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  scenario_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* motion_planning_task::_internal_mutable_scenario() {
  _has_bits_[0] |= 0x00000001u;
  return scenario_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* motion_planning_task::release_scenario() {
  // @@protoc_insertion_point(field_release:motion_planning_task.scenario)
  if (!_internal_has_scenario()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = scenario_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (scenario_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    scenario_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void motion_planning_task::set_allocated_scenario(std::string* scenario) {
  if (scenario != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scenario_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scenario,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (scenario_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    scenario_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:motion_planning_task.scenario)
}

// optional string algorithm = 2;
inline bool motion_planning_task::_internal_has_algorithm() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool motion_planning_task::has_algorithm() const {
  return _internal_has_algorithm();
}
inline void motion_planning_task::clear_algorithm() {
  algorithm_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& motion_planning_task::algorithm() const {
  // @@protoc_insertion_point(field_get:motion_planning_task.algorithm)
  return _internal_algorithm();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void motion_planning_task::set_algorithm(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:motion_planning_task.algorithm)
}
inline std::string* motion_planning_task::mutable_algorithm() {
  std::string* _s = _internal_mutable_algorithm();
  // @@protoc_insertion_point(field_mutable:motion_planning_task.algorithm)
  return _s;
}
inline const std::string& motion_planning_task::_internal_algorithm() const {
  return algorithm_.Get();
}
inline void motion_planning_task::_internal_set_algorithm(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  algorithm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* motion_planning_task::_internal_mutable_algorithm() {
  _has_bits_[0] |= 0x00000002u;
  return algorithm_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* motion_planning_task::release_algorithm() {
  // @@protoc_insertion_point(field_release:motion_planning_task.algorithm)
  if (!_internal_has_algorithm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = algorithm_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (algorithm_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void motion_planning_task::set_allocated_algorithm(std::string* algorithm) {
  if (algorithm != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (algorithm_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:motion_planning_task.algorithm)
}

// optional string env = 3;
inline bool motion_planning_task::_internal_has_env() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool motion_planning_task::has_env() const {
  return _internal_has_env();
}
inline void motion_planning_task::clear_env() {
  env_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& motion_planning_task::env() const {
  // @@protoc_insertion_point(field_get:motion_planning_task.env)
  return _internal_env();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void motion_planning_task::set_env(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 env_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:motion_planning_task.env)
}
inline std::string* motion_planning_task::mutable_env() {
  std::string* _s = _internal_mutable_env();
  // @@protoc_insertion_point(field_mutable:motion_planning_task.env)
  return _s;
}
inline const std::string& motion_planning_task::_internal_env() const {
  return env_.Get();
}
inline void motion_planning_task::_internal_set_env(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  env_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* motion_planning_task::_internal_mutable_env() {
  _has_bits_[0] |= 0x00000004u;
  return env_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* motion_planning_task::release_env() {
  // @@protoc_insertion_point(field_release:motion_planning_task.env)
  if (!_internal_has_env()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = env_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (env_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    env_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void motion_planning_task::set_allocated_env(std::string* env) {
  if (env != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  env_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), env,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (env_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    env_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:motion_planning_task.env)
}

// optional string robot = 4;
inline bool motion_planning_task::_internal_has_robot() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool motion_planning_task::has_robot() const {
  return _internal_has_robot();
}
inline void motion_planning_task::clear_robot() {
  robot_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& motion_planning_task::robot() const {
  // @@protoc_insertion_point(field_get:motion_planning_task.robot)
  return _internal_robot();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void motion_planning_task::set_robot(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 robot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:motion_planning_task.robot)
}
inline std::string* motion_planning_task::mutable_robot() {
  std::string* _s = _internal_mutable_robot();
  // @@protoc_insertion_point(field_mutable:motion_planning_task.robot)
  return _s;
}
inline const std::string& motion_planning_task::_internal_robot() const {
  return robot_.Get();
}
inline void motion_planning_task::_internal_set_robot(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  robot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* motion_planning_task::_internal_mutable_robot() {
  _has_bits_[0] |= 0x00000008u;
  return robot_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* motion_planning_task::release_robot() {
  // @@protoc_insertion_point(field_release:motion_planning_task.robot)
  if (!_internal_has_robot()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = robot_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (robot_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    robot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void motion_planning_task::set_allocated_robot(std::string* robot) {
  if (robot != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  robot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (robot_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    robot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:motion_planning_task.robot)
}

// optional string start = 5;
inline bool motion_planning_task::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool motion_planning_task::has_start() const {
  return _internal_has_start();
}
inline void motion_planning_task::clear_start() {
  start_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& motion_planning_task::start() const {
  // @@protoc_insertion_point(field_get:motion_planning_task.start)
  return _internal_start();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void motion_planning_task::set_start(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:motion_planning_task.start)
}
inline std::string* motion_planning_task::mutable_start() {
  std::string* _s = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:motion_planning_task.start)
  return _s;
}
inline const std::string& motion_planning_task::_internal_start() const {
  return start_.Get();
}
inline void motion_planning_task::_internal_set_start(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* motion_planning_task::_internal_mutable_start() {
  _has_bits_[0] |= 0x00000010u;
  return start_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* motion_planning_task::release_start() {
  // @@protoc_insertion_point(field_release:motion_planning_task.start)
  if (!_internal_has_start()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = start_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (start_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void motion_planning_task::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  start_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (start_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    start_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:motion_planning_task.start)
}

// optional string goal = 6;
inline bool motion_planning_task::_internal_has_goal() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool motion_planning_task::has_goal() const {
  return _internal_has_goal();
}
inline void motion_planning_task::clear_goal() {
  goal_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& motion_planning_task::goal() const {
  // @@protoc_insertion_point(field_get:motion_planning_task.goal)
  return _internal_goal();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void motion_planning_task::set_goal(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 goal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:motion_planning_task.goal)
}
inline std::string* motion_planning_task::mutable_goal() {
  std::string* _s = _internal_mutable_goal();
  // @@protoc_insertion_point(field_mutable:motion_planning_task.goal)
  return _s;
}
inline const std::string& motion_planning_task::_internal_goal() const {
  return goal_.Get();
}
inline void motion_planning_task::_internal_set_goal(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  goal_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* motion_planning_task::_internal_mutable_goal() {
  _has_bits_[0] |= 0x00000020u;
  return goal_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* motion_planning_task::release_goal() {
  // @@protoc_insertion_point(field_release:motion_planning_task.goal)
  if (!_internal_has_goal()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = goal_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (goal_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    goal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void motion_planning_task::set_allocated_goal(std::string* goal) {
  if (goal != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  goal_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), goal,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (goal_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    goal_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:motion_planning_task.goal)
}

// optional string min = 7;
inline bool motion_planning_task::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool motion_planning_task::has_min() const {
  return _internal_has_min();
}
inline void motion_planning_task::clear_min() {
  min_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& motion_planning_task::min() const {
  // @@protoc_insertion_point(field_get:motion_planning_task.min)
  return _internal_min();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void motion_planning_task::set_min(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 min_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:motion_planning_task.min)
}
inline std::string* motion_planning_task::mutable_min() {
  std::string* _s = _internal_mutable_min();
  // @@protoc_insertion_point(field_mutable:motion_planning_task.min)
  return _s;
}
inline const std::string& motion_planning_task::_internal_min() const {
  return min_.Get();
}
inline void motion_planning_task::_internal_set_min(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  min_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* motion_planning_task::_internal_mutable_min() {
  _has_bits_[0] |= 0x00000040u;
  return min_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* motion_planning_task::release_min() {
  // @@protoc_insertion_point(field_release:motion_planning_task.min)
  if (!_internal_has_min()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = min_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (min_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    min_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void motion_planning_task::set_allocated_min(std::string* min) {
  if (min != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  min_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), min,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (min_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    min_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:motion_planning_task.min)
}

// optional string max = 8;
inline bool motion_planning_task::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool motion_planning_task::has_max() const {
  return _internal_has_max();
}
inline void motion_planning_task::clear_max() {
  max_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& motion_planning_task::max() const {
  // @@protoc_insertion_point(field_get:motion_planning_task.max)
  return _internal_max();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void motion_planning_task::set_max(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 max_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:motion_planning_task.max)
}
inline std::string* motion_planning_task::mutable_max() {
  std::string* _s = _internal_mutable_max();
  // @@protoc_insertion_point(field_mutable:motion_planning_task.max)
  return _s;
}
inline const std::string& motion_planning_task::_internal_max() const {
  return max_.Get();
}
inline void motion_planning_task::_internal_set_max(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  max_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* motion_planning_task::_internal_mutable_max() {
  _has_bits_[0] |= 0x00000080u;
  return max_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* motion_planning_task::release_max() {
  // @@protoc_insertion_point(field_release:motion_planning_task.max)
  if (!_internal_has_max()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = max_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (max_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    max_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void motion_planning_task::set_allocated_max(std::string* max) {
  if (max != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  max_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), max,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (max_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    max_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:motion_planning_task.max)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mp_5foptions_2eproto
